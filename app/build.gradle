apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {

    //必须放在最上面
   /* signingConfigs {
        other{
            storeFile file('..\\..\\key\\wuyeother.keystore')
            storePassword 'xxxx'
            keyAlias 'xxxx.keystore'
            keyPassword 'xxxx'
        }

    }*/
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "me.parade.architecture.mvvm"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            //根据需要 自行选择添加的对应cpu类型的.so库。
            //说明：运行和打包时，只与主模块中指定使用哪些so文件为准，其他module使用哪些都无所谓
//            abiFilters 'armeabi-v7a', 'x86', 'x86_64'//使用模拟器运行时，'x86', 'x86_64'
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a','x86'//使用真机运行时，只需'armeabi-v7a', 'arm64-v8a'
        }
    }

    //配置build类型 会自动创建debug build类型
    buildTypes {
        release {
            minifyEnabled true //这个是用来开启删除无用代码，比如没有引用到的代码
            shrinkResources true //这个是用来开启删除无用资源，也就是没有被引用的文件
            zipAlignEnabled true //优化开启后,它提高了Applications与Android系统的交互效率
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.SingConfig
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.SingConfig
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures{
        dataBinding true
    }

    //配置源代码集
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
       /* guanghecheng {
            java.srcDir('src/guanghecheng/java')
            res.srcDir('src/guanghecheng/res')
        }
        shentai {
            java.srcDir('src/shentai/java')
            res.srcDir('src/shentai/res')
        }

        chuangshou {
            java.srcDir('src/chuangshou/java')
            res.srcDir('src/chuangshou/res')
        }*/
    }

    //渠道配置,这里不同渠道的签名其实是可以一样的，只需要保证包名+签名一致即可
    flavorDimensions "app"//渠道组，必须要配置
    productFlavors {
        chuangshou{
            versionCode 2
            versionName "1.0.1"
            resValue "string", "app_name", "kotlin-mvvm"
            manifestPlaceholders = [
                    AMAP_APIKEY : "9754f9ab2233ac608f04de83f08571b1"//高德地图ApiKey
            ]
            buildConfigField "String", "BASE_URL", "\"http://csapi.dongben.cc:8001/api/\""
            buildConfigField "String", "BASE_WEB_URL", "\"http://cswu.dongben.cc:8062/#/\""
            buildConfigField "String", "WX_APPID", "\"wxb6a2e4eda6241d21\""
            buildConfigField "int" , "G_C_ID" , '63'
            buildConfigField "String" , "SHAN_YAN_APP_ID" , "\"ylR8wy7A\""
            buildConfigField "String", "BUGGLY_APPID", "\"cc0973f502\""
        }
    }

    android.applicationVariants.all { variant ->
        //这样配置是解決更新Android Studio 3.0以及gradle:3.0.0之后，出现Cannot set the value of read-only property ‘outputFile’报错问题
        variant.outputs.all {output->
            // 输出apk名称为wuye_manager-v1.0.0-0329_0944-release.apk
            outputFileName = "wuye-v${variant.productFlavors[0].versionName}-${releaseTime()}-${output.baseName}.apk"
        }
    }
}

static def releaseTime() {
    return new Date().format("MMdd_HHmm", TimeZone.default)
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'androidx.multidex:multidex:2.0.1'

    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    def fragment_version = "1.2.5"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    def paging_version = "3.0.0-beta02"
    implementation "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx

    implementation 'com.google.android.material:material:1.2.1'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    implementation ("com.github.bumptech.glide:glide:4.11.0") {
        exclude group: "com.android.support"
    }
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.11.0'

    implementation 'com.safframework.log:saf-logginginterceptor:1.4.9'

    //万能适配器
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.2'
    //utilcode
    implementation 'com.blankj:utilcodex:1.30.6'
    //权限
    implementation 'com.permissionx.guolindev:permissionx:1.4.0'
    //压缩
    implementation 'top.zibin:Luban:1.1.8'

}